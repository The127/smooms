// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using smooms.app.Models;

#nullable disable

namespace smooms.app.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221110180648_Relationship")]
    partial class Relationship
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-rc.2.22472.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("smooms.app.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("display_name");

                    b.Property<string>("EMail")
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)")
                        .HasColumnName("e_mail");

                    b.Property<bool>("EMailVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("e_mail_verified");

                    b.Property<byte[]>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("hashed_password");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("salt");

                    b.HasKey("Id")
                        .HasName("pk_account");

                    b.HasIndex("EMail")
                        .IsUnique()
                        .HasDatabaseName("ix_account_e_mail");

                    b.ToTable("account", null, t =>
                        {
                            t.HasCheckConstraint("CK_account_display_name_MinLength", "LENGTH(display_name) >= 0");

                            t.HasCheckConstraint("CK_account_e_mail_EmailAddress", "e_mail ~ '^[^@]+@[^@]+$'");

                            t.HasCheckConstraint("CK_account_e_mail_MinLength", "LENGTH(e_mail) >= 0");
                        });
                });

            modelBuilder.Entity("smooms.app.Models.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_device");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_device_account_id");

                    b.ToTable("device", (string)null);
                });

            modelBuilder.Entity("smooms.app.Models.Device", b =>
                {
                    b.HasOne("smooms.app.Models.Account", "Account")
                        .WithMany("Devices")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_device_account_account_temp_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("smooms.app.Models.Account", b =>
                {
                    b.Navigation("Devices");
                });
#pragma warning restore 612, 618
        }
    }
}
